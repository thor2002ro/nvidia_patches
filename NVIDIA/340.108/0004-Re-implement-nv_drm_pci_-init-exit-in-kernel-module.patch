From e1538a59da02cc4de590b25f44a1a4901fe04132 Mon Sep 17 00:00:00 2001
From: "Isaak I. Aleksandrov" <Isaak.Aleksandrov@protonmail.ch>
Date: Mon, 10 Feb 2020 21:44:53 +0000
Subject: [PATCH 4/8] Re-implement nv_drm_pci_{init,exit} in kernel module

---
 kernel/Makefile    |  1 +
 kernel/conftest.sh | 16 +++++++++++++
 kernel/nv-drm.c    | 60 +++++++++++++++++++++++++++++++++++++++++++++-
 3 files changed, 76 insertions(+), 1 deletion(-)

diff --git a/kernel/Makefile b/kernel/Makefile
index b7a2de5..365075b 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -149,6 +149,7 @@ COMPILE_TESTS = \
 	vm_fault_present \
 	vm_fault_has_address \
 	drm_driver_unload_has_int_return_type \
+	drm_pci_init \
 	drm_legacy_pci_init \
 	timer_setup \
 	do_gettimeofday \
diff --git a/kernel/conftest.sh b/kernel/conftest.sh
index bf291d7..da0cde8 100755
--- a/kernel/conftest.sh
+++ b/kernel/conftest.sh
@@ -2070,6 +2070,22 @@ compile_test() {
             compile_check_conftest "$CODE" "NV_DRM_DRIVER_UNLOAD_HAS_INT_RETURN_TYPE" "" "types"
         ;;
 
+        drm_pci_init)
+            #
+            # Determine if drm_pci_init() is present.
+            #
+            CODE="
+            #if defined(NV_DRM_DRMP_H_PRESENT)
+            #include <drm/drmP.h>
+            #endif
+
+            void conftest_drm_legacy_pci_init(void) {
+                drm_pci_init();
+            }"
+
+            compile_check_conftest "$CODE" "NV_DRM_PCI_INIT_PRESENT" "" "functions"
+        ;;
+
         drm_legacy_pci_init)
             #
             # Determine if drm_legacy_pci_init() is present. drm_pci_init() was
diff --git a/kernel/nv-drm.c b/kernel/nv-drm.c
index 0d1cdbf..578adda 100644
--- a/kernel/nv-drm.c
+++ b/kernel/nv-drm.c
@@ -50,9 +50,67 @@
 #if defined(NV_DRM_LEGACY_PCI_INIT_PRESENT)
 #define nv_drm_pci_init drm_legacy_pci_init
 #define nv_drm_pci_exit drm_legacy_pci_exit
-#else
+#elif defined(NV_DRM_PCI_INIT_PRESENT)
 #define nv_drm_pci_init drm_pci_init
 #define nv_drm_pci_exit drm_pci_exit
+#else
+/*
+ * Code from drm_legacy_pci_{init,exit}
+ * Extracted from tag: v5.6.3, file: drivers/gpu/drm/drm_pci.c
+ */
+int nv_drm_pci_init(struct drm_driver *driver, struct pci_driver *pdriver)
+{
+    struct pci_dev *pdev = NULL;
+    const struct pci_device_id *pid;
+    int i;
+
+    DRM_DEBUG("\n");
+
+    if (WARN_ON(!(driver->driver_features & DRIVER_LEGACY)))
+        return -EINVAL;
+
+    /* If not using KMS, fall back to stealth mode manual scanning. */
+    INIT_LIST_HEAD(&driver->legacy_dev_list);
+    for (i = 0; pdriver->id_table[i].vendor != 0; i++) {
+        pid = &pdriver->id_table[i];
+
+        /* Loop around setting up a DRM device for each PCI device
+         * matching our ID and device class.  If we had the internal
+         * function that pci_get_subsys and pci_get_class used, we'd
+         * be able to just pass pid in instead of doing a two-stage
+         * thing.
+         */
+        pdev = NULL;
+        while ((pdev =
+            pci_get_subsys(pid->vendor, pid->device, pid->subvendor,
+                       pid->subdevice, pdev)) != NULL) {
+            if ((pdev->class & pid->class_mask) != pid->class)
+                continue;
+
+            /* stealth mode requires a manual probe */
+            pci_dev_get(pdev);
+            drm_get_pci_dev(pdev, pid, driver);
+        }
+    }
+    return 0;
+}
+
+void nv_drm_pci_exit(struct drm_driver *driver, struct pci_driver *pdriver)
+{
+    struct drm_device *dev, *tmp;
+    DRM_DEBUG("\n");
+
+    if (!(driver->driver_features & DRIVER_LEGACY)) {
+        WARN_ON(1);
+    } else {
+        list_for_each_entry_safe(dev, tmp, &driver->legacy_dev_list,
+                     legacy_dev_list) {
+            list_del(&dev->legacy_dev_list);
+            drm_put_dev(dev);
+        }
+    }
+    DRM_INFO("Module unloaded\n");
+}
 #endif
 
 extern nv_linux_state_t *nv_linux_devices;
-- 
2.26.2

