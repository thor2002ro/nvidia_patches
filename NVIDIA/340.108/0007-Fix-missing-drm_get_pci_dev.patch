From cdb2e00d773fe5f29dba2c4a5440b21231fe7c95 Mon Sep 17 00:00:00 2001
From: "Isaak I. Aleksandrov" <Isaak.Aleksandrov@protonmail.ch>
Date: Sat, 11 Apr 2020 19:30:16 +0000
Subject: [PATCH 7/8] Fix missing drm_get_pci_dev

---
 kernel/Makefile    |   1 +
 kernel/conftest.sh |  20 ++++++
 kernel/nv-drm.c    | 171 ++++++++++++++++++++++++++++++++++++++++++++-
 3 files changed, 191 insertions(+), 1 deletion(-)

diff --git a/kernel/Makefile b/kernel/Makefile
index 3c05bbd..2597080 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -150,6 +150,7 @@ COMPILE_TESTS = \
 	vm_fault_present \
 	vm_fault_has_address \
 	drm_driver_unload_has_int_return_type \
+	drm_get_pci_dev \
 	drm_pci_init \
 	drm_legacy_pci_init \
 	timer_setup \
diff --git a/kernel/conftest.sh b/kernel/conftest.sh
index 69d16ad..eac8a7a 100755
--- a/kernel/conftest.sh
+++ b/kernel/conftest.sh
@@ -2085,6 +2085,26 @@ compile_test() {
             compile_check_conftest "$CODE" "NV_DRM_DRIVER_UNLOAD_HAS_INT_RETURN_TYPE" "" "types"
         ;;
 
+        drm_get_pci_dev)
+            #
+            # Determine if drm_get_pci_dev() is present.
+            #
+            CODE="
+            #if defined(NV_DRM_DRMP_H_PRESENT)
+            #include <drm/drmP.h>
+            #endif
+
+            #if defined(NV_DRM_DRM_PCI_H_PRESENT)
+            #include <drm/drm_pci.h>
+            #endif
+
+            void conftest_drm_legacy_pci_init(void) {
+                drm_get_pci_dev();
+            }"
+
+            compile_check_conftest "$CODE" "NV_DRM_GET_PCI_DEV_PRESENT" "" "functions"
+        ;;
+
         drm_pci_init)
             #
             # Determine if drm_pci_init() is present.
diff --git a/kernel/nv-drm.c b/kernel/nv-drm.c
index 578adda..85db07e 100644
--- a/kernel/nv-drm.c
+++ b/kernel/nv-drm.c
@@ -54,6 +54,175 @@
 #define nv_drm_pci_init drm_pci_init
 #define nv_drm_pci_exit drm_pci_exit
 #else
+#if defined(NV_DRM_GET_PCI_DEV_PRESENT)
+#define nv_drm_get_pci_dev drm_get_pci_dev
+#else
+#include <drm/drm_agpsupport.h>
+
+struct nv_drm_agp_head {
+    struct agp_kern_info agp_info;
+    struct list_head memory;
+    unsigned long mode;
+    struct agp_bridge_data *bridge;
+    int enabled;
+    int acquired;
+    unsigned long base;
+    int agp_mtrr;
+    int cant_use_aperture;
+    unsigned long page_mask;
+};
+
+struct nv_drm_agp_mem {
+    unsigned long handle;
+    struct agp_memory *memory;
+    unsigned long bound;
+    int pages;
+    struct list_head head;
+};
+
+/*
+ * Code from drm_agp_init/nv_drm_{free,unbind}_agp
+ * Extracted from commit: 5b8b9d0c6d0e0f1993c6c56deaf9646942c49d94, file: drivers/gpu/drm/drm_agpsupport.c
+ */
+struct drm_agp_head *nv_drm_agp_init(struct drm_device *dev)
+{
+    struct nv_drm_agp_head *head = NULL;
+
+    head = kzalloc(sizeof(*head), GFP_KERNEL);
+    if (!head)
+        return NULL;
+    head->bridge = agp_find_bridge(dev->pdev);
+    if (!head->bridge) {
+        head->bridge = agp_backend_acquire(dev->pdev);
+        if (!head->bridge) {
+            kfree(head);
+            return NULL;
+        }
+        agp_copy_info(head->bridge, &head->agp_info);
+        agp_backend_release(head->bridge);
+    } else {
+        agp_copy_info(head->bridge, &head->agp_info);
+    }
+    if (head->agp_info.chipset == NOT_SUPPORTED) {
+        kfree(head);
+        return NULL;
+    }
+    INIT_LIST_HEAD(&head->memory);
+    head->cant_use_aperture = head->agp_info.cant_use_aperture;
+    head->page_mask = head->agp_info.page_mask;
+    head->base = head->agp_info.aper_base;
+    return (struct drm_agp_head *)head;
+}
+
+void nv_drm_free_agp(struct agp_memory *handle, int pages)
+{
+    agp_free_memory(handle);
+}
+
+int nv_drm_unbind_agp(struct agp_memory *handle)
+{
+    return agp_unbind_memory(handle);
+}
+
+/*
+ * Code from drm_pci_agp_{clear,destroy,init}/drm_get_pci_dev
+ * Extracted from commit: 5b8b9d0c6d0e0f1993c6c56deaf9646942c49d94, file: drivers/gpu/drm/drm_pci.c
+ */
+static void nv_drm_pci_agp_init(struct drm_device *dev)
+{
+    if (drm_core_check_feature(dev, DRIVER_USE_AGP)) {
+        if (pci_find_capability(dev->pdev, PCI_CAP_ID_AGP))
+            dev->agp = nv_drm_agp_init(dev);
+        if (dev->agp) {
+            dev->agp->agp_mtrr = arch_phys_wc_add(
+                dev->agp->agp_info.aper_base,
+                dev->agp->agp_info.aper_size *
+                1024 * 1024);
+        }
+    }
+}
+
+void nv_drm_legacy_agp_clear(struct drm_device *dev)
+{
+    struct nv_drm_agp_mem *entry, *tempe;
+
+    if (!dev->agp)
+        return;
+    if (!drm_core_check_feature(dev, DRIVER_LEGACY))
+        return;
+
+    list_for_each_entry_safe(entry, tempe, &dev->agp->memory, head) {
+        if (entry->bound)
+            nv_drm_unbind_agp(entry->memory);
+        nv_drm_free_agp(entry->memory, entry->pages);
+        kfree(entry);
+    }
+    INIT_LIST_HEAD(&dev->agp->memory);
+
+    if (dev->agp->acquired)
+        drm_agp_release(dev);
+
+    dev->agp->acquired = 0;
+    dev->agp->enabled = 0;
+}
+
+void nv_drm_pci_agp_destroy(struct drm_device *dev)
+{
+    if (dev->agp) {
+        arch_phys_wc_del(dev->agp->agp_mtrr);
+        nv_drm_legacy_agp_clear(dev);
+        kfree(dev->agp);
+        dev->agp = NULL;
+    }
+}
+
+static int nv_drm_get_pci_dev(struct pci_dev *pdev,
+               const struct pci_device_id *ent,
+               struct drm_driver *driver)
+{
+    struct drm_device *dev;
+    int ret;
+
+    DRM_DEBUG("\n");
+
+    dev = drm_dev_alloc(driver, &pdev->dev);
+    if (IS_ERR(dev))
+        return PTR_ERR(dev);
+
+    ret = pci_enable_device(pdev);
+    if (ret)
+        goto err_free;
+
+    dev->pdev = pdev;
+#ifdef __alpha__
+    dev->hose = pdev->sysdata;
+#endif
+
+    if (drm_core_check_feature(dev, DRIVER_MODESET))
+        pci_set_drvdata(pdev, dev);
+
+    nv_drm_pci_agp_init(dev);
+
+    ret = drm_dev_register(dev, ent->driver_data);
+    if (ret)
+        goto err_agp;
+
+    /* No locking needed since shadow-attach is single-threaded since it may
+     * only be called from the per-driver module init hook. */
+    if (drm_core_check_feature(dev, DRIVER_LEGACY))
+        list_add_tail(&dev->legacy_dev_list, &driver->legacy_dev_list);
+
+    return 0;
+
+err_agp:
+    nv_drm_pci_agp_destroy(dev);
+    pci_disable_device(pdev);
+err_free:
+    drm_dev_put(dev);
+    return ret;
+}
+#endif
+
 /*
  * Code from drm_legacy_pci_{init,exit}
  * Extracted from tag: v5.6.3, file: drivers/gpu/drm/drm_pci.c
@@ -89,7 +258,7 @@ int nv_drm_pci_init(struct drm_driver *driver, struct pci_driver *pdriver)
 
             /* stealth mode requires a manual probe */
             pci_dev_get(pdev);
-            drm_get_pci_dev(pdev, pid, driver);
+            nv_drm_get_pci_dev(pdev, pid, driver);
         }
     }
     return 0;
-- 
2.26.2

