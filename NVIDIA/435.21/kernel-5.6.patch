diff --git a/kernel/common/inc/nv-linux.h b/kernel/common/inc/nv-linux.h
index 97af7fa..4043f37 100644
--- a/kernel/common/inc/nv-linux.h
+++ b/kernel/common/inc/nv-linux.h
@@ -522,7 +522,11 @@ static inline void *nv_ioremap(NvU64 phys, NvU64 size)
 
 static inline void *nv_ioremap_nocache(NvU64 phys, NvU64 size)
 {
+#if defined(NV_IOREMAP_NOCACHE_PRESENT)
     void *ptr = ioremap_nocache(phys, size);
+#else
+    void *ptr = ioremap(phys, size);
+#endif
     if (ptr)
         NV_MEMDBG_ADD(ptr, size);
     return ptr;
diff --git a/kernel/common/inc/nv-procfs.h b/kernel/common/inc/nv-procfs.h
index 8b53f86..4c5aceb 100644
--- a/kernel/common/inc/nv-procfs.h
+++ b/kernel/common/inc/nv-procfs.h
@@ -28,6 +28,18 @@
 
 #define IS_EXERCISE_ERROR_FORWARDING_ENABLED() (EXERCISE_ERROR_FORWARDING)
 
+#if defined(NV_HAVE_PROC_OPS)
+#define NV_CREATE_PROC_FILE(filename,parent,__name,__data)               \
+   ({                                                                    \
+        struct proc_dir_entry *__entry;                                  \
+        int mode = (S_IFREG | S_IRUGO);                                  \
+        const struct proc_ops *fops = &nv_procfs_##__name##_fops;        \
+        if (fops->proc_write != 0)                                       \
+            mode |= S_IWUSR;                                             \
+        __entry = proc_create_data(filename, mode, parent, fops, __data);\
+        __entry;                                                         \
+    })
+#else
 #define NV_CREATE_PROC_FILE(filename,parent,__name,__data)               \
    ({                                                                    \
         struct proc_dir_entry *__entry;                                  \
@@ -38,6 +50,7 @@
         __entry = proc_create_data(filename, mode, parent, fops, __data);\
         __entry;                                                         \
     })
+#endif
 
 /*
  * proc_mkdir_mode exists in Linux 2.6.9, but isn't exported until Linux 3.0.
@@ -77,6 +90,44 @@
     remove_proc_entry(entry->name, entry->parent);
 #endif
 
+#if defined(NV_HAVE_PROC_OPS)
+#define NV_DEFINE_SINGLE_PROCFS_FILE(name, open_callback, close_callback)     \
+    static int nv_procfs_open_##name(                                         \
+        struct inode *inode,                                                  \
+        struct file *filep                                                    \
+    )                                                                         \
+    {                                                                         \
+        int ret;                                                              \
+        ret = single_open(filep, nv_procfs_read_##name,                       \
+                          NV_PDE_DATA(inode));                                \
+        if (ret < 0)                                                          \
+        {                                                                     \
+            return ret;                                                       \
+        }                                                                     \
+        ret = open_callback();                                                \
+        if (ret < 0)                                                          \
+        {                                                                     \
+            single_release(inode, filep);                                     \
+        }                                                                     \
+        return ret;                                                           \
+    }                                                                         \
+                                                                              \
+    static int nv_procfs_release_##name(                                      \
+        struct inode *inode,                                                  \
+        struct file *filep                                                    \
+    )                                                                         \
+    {                                                                         \
+        close_callback();                                                     \
+        return single_release(inode, filep);                                  \
+    }                                                                         \
+                                                                              \
+    static const struct proc_ops nv_procfs_##name##_fops = {                  \
+        .proc_open       = nv_procfs_open_##name,                             \
+        .proc_read       = seq_read,                                          \
+        .proc_lseek      = seq_lseek,                                         \
+        .proc_release    = nv_procfs_release_##name,                          \
+    };
+#else
 #define NV_DEFINE_SINGLE_PROCFS_FILE(name, open_callback, close_callback)     \
     static int nv_procfs_open_##name(                                         \
         struct inode *inode,                                                  \
@@ -114,6 +165,7 @@
         .llseek     = seq_lseek,                                              \
         .release    = nv_procfs_release_##name,                               \
     };
+#endif
 
 #endif  /* CONFIG_PROC_FS */
 
diff --git a/kernel/common/inc/nv-time.h b/kernel/common/inc/nv-time.h
index 968b873..fefec9d 100644
--- a/kernel/common/inc/nv-time.h
+++ b/kernel/common/inc/nv-time.h
@@ -27,7 +27,13 @@
 
 #include <linux/ktime.h>
 
-static inline void nv_gettimeofday(struct timeval *tv)
+#if defined(NV_HAVE_TIMEVAL)
+#define nv_timeval timeval
+#else
+#define nv_timeval __kernel_old_timeval
+#endif
+
+static inline void nv_gettimeofday(struct nv_timeval *tv)
 {
 #ifdef NV_DO_GETTIMEOFDAY_PRESENT
     do_gettimeofday(tv);
@@ -36,7 +42,7 @@ static inline void nv_gettimeofday(struct timeval *tv)
 
     ktime_get_real_ts64(&now);
 
-    *tv = (struct timeval) {
+    *tv = (struct nv_timeval) {
         .tv_sec = now.tv_sec,
         .tv_usec = now.tv_nsec/1000,
     };
diff --git a/kernel/conftest.sh b/kernel/conftest.sh
index 9cdb559..9397034 100755
--- a/kernel/conftest.sh
+++ b/kernel/conftest.sh
@@ -124,6 +124,7 @@ test_headers() {
     FILES="$FILES linux/fence.h"
     FILES="$FILES soc/tegra/chip-id.h"
     FILES="$FILES video/nv_internal.h"
+    FILES="$FILES linux/dma-resv.h"
 
     # Arch specific headers which need testing
     FILES_ARCH="asm/book3s/64/hash-64k.h"
@@ -711,6 +712,22 @@ compile_test() {
             compile_check_conftest "$CODE" "NV_IOREMAP_CACHE_PRESENT" "" "functions"
         ;;
 
+        ioremap_nocache)
+            #
+            # Determine if the ioremap_nocache() function is present.
+            #
+            # Removed by commit 4bdc0d676a64 ("remove ioremap_nocache and
+            # devm_ioremap_nocache") in v5.6 (2020-01-06)
+            #
+            CODE="
+            #include <asm/io.h>
+            void conftest_ioremap_nocache(void) {
+                ioremap_nocache();
+            }"
+
+            compile_check_conftest "$CODE" "NV_IOREMAP_NOCACHE_PRESENT" "" "functions"
+        ;;
+
         ioremap_wc)
             #
             # Determine if the ioremap_wc() function is present.
@@ -751,6 +768,55 @@ compile_test() {
             compile_check_conftest "$CODE" "NV_SG_ALLOC_TABLE_FROM_PAGES_PRESENT" "" "functions"
         ;;
 
+        proc_ops)
+            CODE="
+            #include <linux/proc_fs.h>
+            int conftest_proc_ops(void) {
+                return offsetof(struct proc_ops, proc_open);
+            }"
+
+            compile_check_conftest "$CODE" "NV_HAVE_PROC_OPS" "" "types"
+        ;;
+
+        timeval)
+            CODE="
+            #include <linux/time.h>
+            #include <linux/ktime.h>
+            int conftest_timeval(void) {
+                return offsetof(struct timeval, tv_sec);
+            }"
+
+            compile_check_conftest "$CODE" "NV_HAVE_TIMEVAL" "" "types"
+        ;;
+
+        ktime_get_raw_ts64)
+            #
+            # Determine if the ktime_get_raw_ts64() function is present.
+            #
+            CODE="
+            #include <linux/ktime.h>
+            int conftest_ktime_get_raw_ts64(void) {
+                ktime_get_raw_ts64();
+            }"
+
+            compile_check_conftest "$CODE" "NV_KTIME_GET_RAW_TS64_PRESENT" "" "functions"
+        ;;
+
+        ktime_get_real_ts64)
+            #
+            # Determine if ktime_get_real_ts64() is present
+            #
+            # Added by commit d6d29896c665d ("timekeeping: Provide timespec64
+            # based interfaces") in 3.17 (2014-07-16)
+            #
+        CODE="
+        #include <linux/ktime.h>
+        void conftest_ktime_get_real_ts64(void){
+            ktime_get_real_ts64();
+        }"
+            compile_check_conftest "$CODE" "NV_KTIME_GET_REAL_TS64_PRESENT" "" "functions"
+        ;;
+
         efi_enabled)
             #
             # Added in 2.6.12 as a variable
diff --git a/kernel/nvidia-drm/nvidia-drm.Kbuild b/kernel/nvidia-drm/nvidia-drm.Kbuild
index f4ef5f0..2a66a9c 100644
--- a/kernel/nvidia-drm/nvidia-drm.Kbuild
+++ b/kernel/nvidia-drm/nvidia-drm.Kbuild
@@ -87,3 +87,5 @@ NV_CONFTEST_TYPE_COMPILE_TESTS += dma_buf_owner
 NV_CONFTEST_TYPE_COMPILE_TESTS += drm_connector_list_iter
 NV_CONFTEST_TYPE_COMPILE_TESTS += drm_atomic_helper_swap_state_has_stall_arg
 NV_CONFTEST_TYPE_COMPILE_TESTS += drm_gem_object_has_resv
+NV_CONFTEST_TYPE_COMPILE_TESTS += proc_ops
+NV_CONFTEST_TYPE_COMPILE_TESTS += timeval
diff --git a/kernel/nvidia-modeset/nvidia-modeset-linux.c b/kernel/nvidia-modeset/nvidia-modeset-linux.c
index 0ca2c7d..8902143 100644
--- a/kernel/nvidia-modeset/nvidia-modeset-linux.c
+++ b/kernel/nvidia-modeset/nvidia-modeset-linux.c
@@ -266,7 +266,7 @@ void NVKMS_API_CALL nvkms_usleep(NvU64 usec)
 
 NvU64 NVKMS_API_CALL nvkms_get_usec(void)
 {
-    struct timeval tv;
+    struct nv_timeval tv;
 
     nv_gettimeofday(&tv);
 
diff --git a/kernel/nvidia-uvm/uvm_linux.h b/kernel/nvidia-uvm/uvm_linux.h
index e81fc95..6a47713 100644
--- a/kernel/nvidia-uvm/uvm_linux.h
+++ b/kernel/nvidia-uvm/uvm_linux.h
@@ -286,7 +286,16 @@ static inline uint64_t NV_DIV64(uint64_t dividend, uint64_t divisor, uint64_t *r
 }
 #endif
 
-#if defined(CLOCK_MONOTONIC_RAW)
+#if defined(NV_KTIME_GET_RAW_TS64_PRESENT)
+static inline NvU64 NV_GETTIME(void)
+{
+    struct timespec64 ts64 = {0};
+
+    ktime_get_raw_ts64(&ts64);
+
+    return (ts64.tv_sec * 1000000000ULL + ts64.tv_nsec);
+}
+#elif defined(CLOCK_MONOTONIC_RAW)
 /* Return a nanosecond-precise value */
 static inline NvU64 NV_GETTIME(void)
 {
@@ -302,7 +311,7 @@ static inline NvU64 NV_GETTIME(void)
  * available non-GPL symbols. */
 static inline NvU64 NV_GETTIME(void)
 {
-    struct timeval tv = {0};
+    struct nv_timeval tv = {0};
 
     nv_gettimeofday(&tv);
 
diff --git a/kernel/nvidia-uvm/uvm_linux.h.orig b/kernel/nvidia-uvm/uvm_linux.h.orig
new file mode 100644
index 0000000..e81fc95
--- /dev/null
+++ b/kernel/nvidia-uvm/uvm_linux.h.orig
@@ -0,0 +1,491 @@
+/*******************************************************************************
+    Copyright (c) 2013-2019 NVIDIA Corporation
+
+    Permission is hereby granted, free of charge, to any person obtaining a copy
+    of this software and associated documentation files (the "Software"), to
+    deal in the Software without restriction, including without limitation the
+    rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
+    sell copies of the Software, and to permit persons to whom the Software is
+    furnished to do so, subject to the following conditions:
+
+        The above copyright notice and this permission notice shall be
+        included in all copies or substantial portions of the Software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+    DEALINGS IN THE SOFTWARE.
+
+*******************************************************************************/
+
+//
+// uvm_linux.h
+//
+// This file, along with conftest.h and umv_linux.c, helps to insulate
+// the (out-of-tree) UVM driver from changes to the upstream Linux kernel.
+//
+//
+
+#ifndef _UVM_LINUX_H
+#define _UVM_LINUX_H
+
+#include "nv-misc.h"
+#include "nvtypes.h"
+
+#include "nv-time.h"
+
+#define NV_BUILD_MODULE_INSTANCES 0
+#include "nv-linux.h"
+
+#if defined(NV_LINUX_LOG2_H_PRESENT)
+#include <linux/log2.h>
+#endif
+#if defined(NV_PRIO_TREE_PRESENT)
+#include <linux/prio_tree.h>
+#endif
+
+#include <linux/jhash.h>
+#include <linux/rwsem.h>
+#include <linux/rbtree.h>
+#include <asm/current.h>
+
+#include <linux/random.h>           /* get_random_bytes()               */
+#include <linux/radix-tree.h>       /* Linux kernel radix tree          */
+
+#include <linux/file.h>             /* fget()                           */
+
+#include <linux/percpu.h>
+
+#if defined(NV_LINUX_PRINTK_H_PRESENT)
+#include <linux/printk.h>
+#endif
+
+#if defined(NV_LINUX_RATELIMIT_H_PRESENT)
+#include <linux/ratelimit.h>
+#endif
+
+#if defined(NV_PNV_NPU2_INIT_CONTEXT_PRESENT)
+#include <asm/powernv.h>
+#endif
+
+#if defined(NV_LINUX_SCHED_TASK_STACK_H_PRESENT)
+#include <linux/sched/task_stack.h>
+#endif
+
+#include <linux/cpumask.h>
+#include <linux/topology.h>
+
+#include "nv-kthread-q.h"
+
+#if NV_KTHREAD_Q_SUPPORTS_AFFINITY() == 1 && defined(NV_CPUMASK_OF_NODE_PRESENT)
+#define UVM_THREAD_AFFINITY_SUPPORTED() 1
+#else
+#define UVM_THREAD_AFFINITY_SUPPORTED() 0
+#endif
+
+// The ARM arch lacks support for cpumask_of_node() until kernel 4.7. It was
+// added via commit1a2db300348b ("arm64, numa: Add NUMA support for arm64
+// platforms.") Callers should either check UVM_THREAD_AFFINITY_SUPPORTED()
+// prior to calling this function of be prepared to deal with a NULL CPU
+// mask.
+static inline const struct cpumask *uvm_cpumask_of_node(int node)
+{
+#ifdef NV_CPUMASK_OF_NODE_PRESENT
+    return cpumask_of_node(node);
+#else
+    return NULL;
+#endif
+}
+
+// TODO: Bug 1772628: remove the "defined(NV_BUILD_SUPPORTS_HMM)" part,
+// once the HMM (Heterogeneous Memory Management Linux kernel feature) patch
+// gets submitted to the Linux kernel.
+//
+// Until HMM is part of the upstream kernel, NV_BUILD_SUPPORTS_HMM will not be
+// defined in the source code. However, our kernel module build allows you to
+// specify this, via:
+//     "make modules NV_BUILD_SUPPORTS_HMM=1"
+//
+#if defined(CONFIG_HMM) && defined(NV_BUILD_SUPPORTS_HMM)
+    #include <linux/hmm.h>
+    #define UVM_IS_CONFIG_HMM() 1
+#else
+    #define UVM_IS_CONFIG_HMM() 0
+#endif
+
+// See bug 1707453 for further details about setting the minimum kernel version.
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 32)
+#  error This driver does not support kernels older than 2.6.32!
+#endif
+
+#if !defined(VM_RESERVED)
+#define VM_RESERVED    0x00000000
+#endif
+#if !defined(VM_DONTEXPAND)
+#define VM_DONTEXPAND  0x00000000
+#endif
+#if !defined(VM_DONTDUMP)
+#define VM_DONTDUMP    0x00000000
+#endif
+#if !defined(VM_MIXEDMAP)
+#define VM_MIXEDMAP    0x00000000
+#endif
+
+// USHORT_MAX was renamed USHRT_MAX in 2.6.35 via 4be929be34f9bdeffa40d815d32d7d60d2c7f03b
+#if !defined(USHRT_MAX)
+    #define USHRT_MAX USHORT_MAX
+#endif
+
+#define NV_UVM_FENCE()   mb()
+
+//
+// printk.h already defined pr_fmt, so we have to redefine it so the pr_*
+// routines pick up our version
+//
+#undef pr_fmt
+#define NVIDIA_UVM_PRETTY_PRINTING_PREFIX "nvidia-uvm: "
+#define pr_fmt(fmt) NVIDIA_UVM_PRETTY_PRINTING_PREFIX fmt
+
+// Dummy printing function that maintains syntax and format specifier checking
+// but doesn't print anything and doesn't evaluate the print parameters. This is
+// roughly equivalent to the kernel's no_printk function. We use this instead
+// because:
+// 1) no_printk was not available until 2.6.36
+// 2) Until 4.5 no_printk was implemented as a static function, meaning its
+//    parameters were always evaluated
+#define UVM_NO_PRINT(fmt, ...)          \
+    do {                                \
+        if (0)                          \
+            printk(fmt, ##__VA_ARGS__); \
+    } while (0)
+
+// printk_ratelimited was added in 2.6.33 via commit
+// 8a64f336bc1d4aa203b138d29d5a9c414a9fbb47. If not available, we prefer not
+// printing anything since it's supposed to be rate-limited.
+#if !defined(printk_ratelimited)
+    #define printk_ratelimited UVM_NO_PRINT
+#endif
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,8,0)
+    // Just too much compilation trouble with the rate-limiting printk feature
+    // until about k3.8. Because the non-rate-limited printing will cause
+    // surprises and problems, just turn it off entirely in this situation.
+    //
+    #undef pr_debug_ratelimited
+    #define pr_debug_ratelimited UVM_NO_PRINT
+#endif
+
+#if defined(NVCPU_X86) || defined(NVCPU_X86_64)
+#if !defined(pmd_large)
+#define pmd_large(_pmd) \
+    ((pmd_val(_pmd) & (_PAGE_PSE|_PAGE_PRESENT)) == (_PAGE_PSE|_PAGE_PRESENT))
+#endif
+#endif /* defined(NVCPU_X86) || defined(NVCPU_X86_64) */
+
+#if !defined(GFP_DMA32)
+/*
+ * GFP_DMA32 is similar to GFP_DMA, but instructs the Linux zone
+ * allocator to allocate memory from the first 4GB on platforms
+ * such as Linux/x86-64; the alternative is to use an IOMMU such
+ * as the one implemented with the K8 GART, if available.
+ */
+#define GFP_DMA32 0
+#endif
+
+#if !defined(__GFP_NOWARN)
+#define __GFP_NOWARN 0
+#endif
+
+#if !defined(__GFP_NORETRY)
+#define __GFP_NORETRY 0
+#endif
+
+#define NV_UVM_GFP_FLAGS (GFP_KERNEL | __GFP_NORETRY)
+
+#if !defined(NV_ADDRESS_SPACE_INIT_ONCE_PRESENT)
+    void address_space_init_once(struct address_space *mapping);
+#endif
+
+// Develop builds define DEBUG but enable optimization
+#if defined(DEBUG) && !defined(NVIDIA_UVM_DEVELOP)
+  // Wrappers for functions not building correctly without optimizations on,
+  // implemented in uvm_debug_optimized.c. Notably the file is only built for
+  // debug builds, not develop or release builds.
+
+  // Unoptimized builds of atomic_xchg() hit a BUILD_BUG() on arm64 as it relies
+  // on __xchg being completely inlined:
+  //   /usr/src/linux-3.12.19/arch/arm64/include/asm/cmpxchg.h:67:3: note: in expansion of macro 'BUILD_BUG'
+  //
+  // Powerppc hits a similar issue, but ends up with an undefined symbol:
+  //   WARNING: "__xchg_called_with_bad_pointer" [...] undefined!
+  int nv_atomic_xchg(atomic_t *val, int new);
+
+  // Same problem as atomic_xchg() on powerppc:
+  //   WARNING: "__cmpxchg_called_with_bad_pointer" [...] undefined!
+  int nv_atomic_cmpxchg(atomic_t *val, int old, int new);
+
+  // Same problem as atomic_xchg() on powerppc:
+  //   WARNING: "__cmpxchg_called_with_bad_pointer" [...] undefined!
+  long nv_atomic_long_cmpxchg(atomic_long_t *val, long old, long new);
+
+  // This Linux kernel commit:
+  // 2016-08-30  0d025d271e55f3de21f0aaaf54b42d20404d2b23
+  // leads to build failures on x86_64, when compiling without optimization. Avoid
+  // that problem, by providing our own builds of copy_from_user / copy_to_user,
+  // for debug (non-optimized) UVM builds. Those are accessed via these
+  // nv_copy_to/from_user wrapper functions.
+  //
+  // Bug 1849583 has further details.
+  unsigned long nv_copy_from_user(void *to, const void __user *from, unsigned long n);
+  unsigned long nv_copy_to_user(void __user *to, const void *from, unsigned long n);
+
+#else
+  #define nv_atomic_xchg            atomic_xchg
+  #define nv_atomic_cmpxchg         atomic_cmpxchg
+  #define nv_atomic_long_cmpxchg    atomic_long_cmpxchg
+  #define nv_copy_to_user           copy_to_user
+  #define nv_copy_from_user         copy_from_user
+#endif
+
+#ifndef NV_ALIGN_DOWN
+#define NV_ALIGN_DOWN(v,g) ((v) & ~((g) - 1))
+#endif
+
+#if !defined(NV_KBASENAME_PRESENT)
+static inline const char *kbasename(const char *str)
+{
+    const char *p = strrchr(str, '/');
+    if (!p)
+        return str;
+    return p + 1;
+}
+#endif
+
+#if defined(NVCPU_X86)
+/* Some old IA32 kernels don't have 64/64 division routines,
+ * they only support 64/32 division with do_div(). */
+static inline uint64_t NV_DIV64(uint64_t dividend, uint64_t divisor, uint64_t *remainder)
+{
+    /* do_div() only accepts a 32-bit divisor */
+    *remainder = do_div(dividend, (uint32_t)divisor);
+
+    /* do_div() modifies the dividend in-place */
+    return dividend;
+}
+#else
+/* All other 32/64-bit kernels we support (including non-x86 kernels) support
+ * 64/64 division. */
+static inline uint64_t NV_DIV64(uint64_t dividend, uint64_t divisor, uint64_t *remainder)
+{
+    *remainder = dividend % divisor;
+
+    return dividend / divisor;
+}
+#endif
+
+#if defined(CLOCK_MONOTONIC_RAW)
+/* Return a nanosecond-precise value */
+static inline NvU64 NV_GETTIME(void)
+{
+    struct timespec ts = {0};
+
+    getrawmonotonic(&ts);
+
+    /* Wraps around every 583 years */
+    return (ts.tv_sec * 1000000000ULL + ts.tv_nsec);
+}
+#else
+/* We can only return a microsecond-precise value with the
+ * available non-GPL symbols. */
+static inline NvU64 NV_GETTIME(void)
+{
+    struct timeval tv = {0};
+
+    nv_gettimeofday(&tv);
+
+    return (tv.tv_sec * 1000000000ULL + tv.tv_usec * 1000ULL);
+}
+#endif
+
+#if !defined(ilog2)
+    static inline int NV_ILOG2_U32(u32 n)
+    {
+        return fls(n) - 1;
+    }
+    static inline int NV_ILOG2_U64(u64 n)
+    {
+        return fls64(n) - 1;
+    }
+    #define ilog2(n) (sizeof(n) <= 4 ? NV_ILOG2_U32(n) : NV_ILOG2_U64(n))
+#endif
+
+// for_each_bit added in 2.6.24 via commit 3e037454bcfa4b187e8293d2121bd8c0f5a5c31c
+// later renamed in 2.6.34 via commit 984b3f5746ed2cde3d184651dabf26980f2b66e5
+#if !defined(for_each_set_bit)
+    #define for_each_set_bit(bit, addr, size) for_each_bit((bit), (addr), (size))
+#endif
+
+// for_each_set_bit_cont was added in 3.2 via 1e2ad28f80b4e155678259238f51edebc19e4014
+// It was renamed to for_each_set_bit_from in 3.3 via 307b1cd7ecd7f3dc5ce3d3860957f034f0abe4df
+#if !defined(for_each_set_bit_from)
+    #define for_each_set_bit_from(bit, addr, size)              \
+        for ((bit) = find_next_bit((addr), (size), (bit));      \
+             (bit) < (size);                                    \
+             (bit) = find_next_bit((addr), (size), (bit) + 1))
+#endif
+
+// for_each_clear_bit and for_each_clear_bit_from were added in 3.10 via
+// 03f4a8226c2f9c14361f75848d1e93139bab90c4
+#if !defined(for_each_clear_bit)
+    #define for_each_clear_bit(bit, addr, size)                     \
+        for ((bit) = find_first_zero_bit((addr), (size));           \
+             (bit) < (size);                                        \
+             (bit) = find_next_zero_bit((addr), (size), (bit) + 1))
+#endif
+
+#if !defined(for_each_clear_bit_from)
+    #define for_each_clear_bit_from(bit, addr, size)                \
+        for ((bit) = find_next_zero_bit((addr), (size), (bit));     \
+             (bit) < (size);                                        \
+             (bit) = find_next_zero_bit((addr), (size), (bit) + 1))
+#endif
+
+// bitmap_clear was added in 2.6.33 via commit c1a2a962a2ad103846e7950b4591471fabecece7
+#if !defined(NV_BITMAP_CLEAR_PRESENT)
+    static inline void bitmap_clear(unsigned long *map, unsigned int start, int len)
+    {
+        unsigned int index = start;
+        for_each_set_bit_from(index, map, start + len)
+            __clear_bit(index, map);
+    }
+
+    static inline void bitmap_set(unsigned long *map, unsigned int start, int len)
+    {
+        unsigned int index = start;
+        for_each_clear_bit_from(index, map, start + len)
+            __set_bit(index, map);
+    }
+#endif
+
+// smp_mb__before_atomic was added in 3.16, provide a fallback
+#ifndef smp_mb__before_atomic
+  #if NVCPU_IS_X86 || NVCPU_IS_X86_64
+    // That's what the kernel does for x86
+    #define smp_mb__before_atomic() barrier()
+  #else
+    // That's what the kernel does for at least arm32, arm64 and powerpc as of 4.3
+    #define smp_mb__before_atomic() smp_mb()
+  #endif
+#endif
+
+// smp_mb__after_atomic was added in 3.16, provide a fallback
+#ifndef smp_mb__after_atomic
+  #if NVCPU_IS_X86 || NVCPU_IS_X86_64
+    // That's what the kernel does for x86
+    #define smp_mb__after_atomic() barrier()
+  #else
+    // That's what the kernel does for at least arm32, arm64 and powerpc as of 4.3
+    #define smp_mb__after_atomic() smp_mb()
+  #endif
+#endif
+
+// Added in 2.6.24
+#ifndef ACCESS_ONCE
+  #define ACCESS_ONCE(x) (*(volatile typeof(x) *)&(x))
+#endif
+
+// WRITE_ONCE/READ_ONCE have incompatible definitions across versions, which produces warnings.
+// Therefore, we define our own macros
+#define UVM_WRITE_ONCE(x, val) (ACCESS_ONCE(x) = (val))
+#define UVM_READ_ONCE(x) ACCESS_ONCE(x)
+
+// Added in 3.11
+#ifndef PAGE_ALIGNED
+    #define PAGE_ALIGNED(addr) (((addr) & (PAGE_SIZE - 1)) == 0)
+#endif
+
+// Added in 2.6.37 via commit e1ca7788dec6773b1a2bce51b7141948f2b8bccf
+#if !defined(NV_VZALLOC_PRESENT)
+    static inline void *vzalloc(unsigned long size)
+    {
+        void *p = vmalloc(size);
+        if (p)
+            memset(p, 0, size);
+        return p;
+    }
+#endif
+
+// Changed in 3.17 via commit 743162013d40ca612b4cb53d3a200dff2d9ab26e
+#if (NV_WAIT_ON_BIT_LOCK_ARGUMENT_COUNT == 3)
+    #define UVM_WAIT_ON_BIT_LOCK(word, bit, mode) \
+        wait_on_bit_lock(word, bit, mode)
+#elif (NV_WAIT_ON_BIT_LOCK_ARGUMENT_COUNT == 4)
+    static __sched int uvm_bit_wait(void *word)
+    {
+        if (signal_pending_state(current->state, current))
+            return 1;
+        schedule();
+        return 0;
+    }
+    #define UVM_WAIT_ON_BIT_LOCK(word, bit, mode) \
+        wait_on_bit_lock(word, bit, uvm_bit_wait, mode)
+#else
+#error "Unknown number of arguments"
+#endif
+
+static void uvm_init_radix_tree_preloadable(struct radix_tree_root *tree)
+{
+    // GFP_NOWAIT, or some combination of flags that avoids setting
+    // __GFP_DIRECT_RECLAIM (__GFP_WAIT prior to commit
+    // d0164adc89f6bb374d304ffcc375c6d2652fe67d from Nov 2015), is required for
+    // using radix_tree_preload() for the tree.
+    INIT_RADIX_TREE(tree, GFP_NOWAIT);
+}
+
+#if !defined(NV_RADIX_TREE_EMPTY_PRESENT)
+static bool radix_tree_empty(struct radix_tree_root *tree)
+{
+    void *dummy;
+    return radix_tree_gang_lookup(tree, &dummy, 0, 1) == 0;
+}
+#endif
+
+// The radix tree root parameter was added to radix_tree_replace_slot in 4.10.
+// That same change moved radix_tree_replace_slot from a header-only
+// implementation to a .c file, but the symbol wasn't exported until later so
+// we cannot use the function on 4.10. UVM uses this macro to ensure that
+// radix_tree_replace_slot is not called when using that kernel.
+#ifndef NV_RADIX_TREE_REPLACE_SLOT_PRESENT
+    #define NV_RADIX_TREE_REPLACE_SLOT(...) \
+        UVM_ASSERT_MSG(false, "radix_tree_replace_slot cannot be used in 4.10\n");
+#else
+#if (NV_RADIX_TREE_REPLACE_SLOT_ARGUMENT_COUNT == 2)
+    #define NV_RADIX_TREE_REPLACE_SLOT(root, slot, entry) \
+        radix_tree_replace_slot((slot), (entry))
+#elif  (NV_RADIX_TREE_REPLACE_SLOT_ARGUMENT_COUNT == 3)
+    #define NV_RADIX_TREE_REPLACE_SLOT(root, slot, entry) \
+        radix_tree_replace_slot((root), (slot), (entry))
+#else
+#error "Unknown number of arguments"
+#endif
+#endif
+
+#if !defined(NV_USLEEP_RANGE_PRESENT)
+static void __sched usleep_range(unsigned long min, unsigned long max)
+{
+    unsigned min_msec = min / 1000;
+    unsigned max_msec = max / 1000;
+
+    if (min_msec != 0)
+        msleep(min_msec);
+    else if (max_msec != 0)
+        msleep(max_msec);
+    else
+        msleep(1);
+}
+#endif
+
+#endif // _UVM_LINUX_H
diff --git a/kernel/nvidia/linux_nvswitch.c b/kernel/nvidia/linux_nvswitch.c
index 181dbec..ba2330e 100644
--- a/kernel/nvidia/linux_nvswitch.c
+++ b/kernel/nvidia/linux_nvswitch.c
@@ -1588,10 +1588,17 @@ nvswitch_os_get_platform_time
     void
 )
 {
+#if defined(NV_KTIME_GET_REAL_TS64_PRESENT)
+    struct timespec64 ts;
+
+    ktime_get_real_ts64(&ts);
+    return ((NvU64) timespec64_to_ns(&ts));
+#else
     struct timespec ts;
 
     getnstimeofday(&ts);
     return ((NvU64) timespec_to_ns(&ts));
+#endif
 }
 
 void
diff --git a/kernel/nvidia/nv-procfs.c b/kernel/nvidia/nv-procfs.c
index f8206a5..6b7855f 100644
--- a/kernel/nvidia/nv-procfs.c
+++ b/kernel/nvidia/nv-procfs.c
@@ -481,6 +481,15 @@ done:
     return ((status < 0) ? status : (int)count);
 }
 
+#if defined(NV_HAVE_PROC_OPS)
+static struct proc_ops nv_procfs_registry_fops = {
+    .proc_open    = nv_procfs_open_registry,
+    .proc_read    = seq_read,
+    .proc_write   = nv_procfs_write_file,
+    .proc_lseek   = seq_lseek,
+    .proc_release = nv_procfs_close_registry,
+};
+#else
 static struct file_operations nv_procfs_registry_fops = {
     .owner   = THIS_MODULE,
     .open    = nv_procfs_open_registry,
@@ -489,6 +498,7 @@ static struct file_operations nv_procfs_registry_fops = {
     .llseek  = seq_lseek,
     .release = nv_procfs_close_registry,
 };
+#endif
 
 #if defined(CONFIG_PM)
 static int
@@ -560,6 +570,15 @@ nv_procfs_open_suspend_depth(
     return single_open(file, nv_procfs_show_suspend_depth, NULL);
 }
 
+#if defined(NV_HAVE_PROC_OPS)
+static struct proc_ops nv_procfs_suspend_depth_fops = {
+    .proc_open    = nv_procfs_open_suspend_depth,
+    .proc_read    = seq_read,
+    .proc_write   = nv_procfs_write_suspend_depth,
+    .proc_lseek   = seq_lseek,
+    .proc_release = single_release
+};
+#else
 static struct file_operations nv_procfs_suspend_depth_fops = {
     .owner   = THIS_MODULE,
     .open    = nv_procfs_open_suspend_depth,
@@ -568,6 +587,7 @@ static struct file_operations nv_procfs_suspend_depth_fops = {
     .llseek  = seq_lseek,
     .release = single_release
 };
+#endif
 
 static int
 nv_procfs_show_suspend(
@@ -642,6 +662,15 @@ nv_procfs_open_suspend(
     return single_open(file, nv_procfs_show_suspend, NULL);
 }
 
+#if defined(NV_HAVE_PROC_OPS)
+static struct proc_ops nv_procfs_suspend_fops = {
+    .proc_open    = nv_procfs_open_suspend,
+    .proc_read    = seq_read,
+    .proc_write   = nv_procfs_write_suspend,
+    .proc_lseek   = seq_lseek,
+    .proc_release = single_release
+};
+#else
 static struct file_operations nv_procfs_suspend_fops = {
     .owner   = THIS_MODULE,
     .open    = nv_procfs_open_suspend,
@@ -651,6 +680,7 @@ static struct file_operations nv_procfs_suspend_fops = {
     .release = single_release
 };
 #endif
+#endif
 
 /*
  * Forwards error to nv_log_error which exposes data to vendor callback
@@ -753,12 +783,20 @@ done:
     return status;
 }
 
+#if defined(NV_HAVE_PROC_OPS)
+static struct proc_ops nv_procfs_exercise_error_forwarding_fops = {
+    .proc_open    = nv_procfs_open_exercise_error_forwarding,
+    .proc_write   = nv_procfs_write_file,
+    .proc_release = nv_procfs_close_exercise_error_forwarding,
+};
+#else
 static struct file_operations nv_procfs_exercise_error_forwarding_fops = {
     .owner   = THIS_MODULE,
     .open    = nv_procfs_open_exercise_error_forwarding,
     .write   = nv_procfs_write_file,
     .release = nv_procfs_close_exercise_error_forwarding,
 };
+#endif
 
 static int
 nv_procfs_read_unbind_lock(
@@ -880,6 +918,15 @@ done:
     return rc;
 }
 
+#if defined(NV_HAVE_PROC_OPS)
+static struct proc_ops nv_procfs_unbind_lock_fops = {
+    .proc_open    = nv_procfs_open_unbind_lock,
+    .proc_read    = seq_read,
+    .proc_write   = nv_procfs_write_file,
+    .proc_lseek   = seq_lseek,
+    .proc_release = nv_procfs_close_unbind_lock,
+};
+#else
 static struct file_operations nv_procfs_unbind_lock_fops = {
     .owner   = THIS_MODULE,
     .open    = nv_procfs_open_unbind_lock,
@@ -888,6 +935,7 @@ static struct file_operations nv_procfs_unbind_lock_fops = {
     .llseek  = seq_lseek,
     .release = nv_procfs_close_unbind_lock,
 };
+#endif
 
 static const char*
 numa_status_describe(nv_numa_status_t state)
@@ -1216,6 +1264,22 @@ done:
     return retval;
 }
 
+#if defined(NV_HAVE_PROC_OPS)
+static const struct proc_ops nv_procfs_numa_status_fops = {
+    .proc_open    = nv_procfs_open_numa_status,
+    .proc_read    = seq_read,
+    .proc_write   = nv_procfs_write_file,
+    .proc_lseek   = seq_lseek,
+    .proc_release = nv_procfs_close_numa_status,
+};
+
+static const struct proc_ops nv_procfs_offline_pages_fops = {
+    .proc_open    = nv_procfs_open_offline_pages,
+    .proc_read    = seq_read,
+    .proc_lseek   = seq_lseek,
+    .proc_release = nv_procfs_close_offline_pages,
+};
+#else
 static const struct file_operations nv_procfs_numa_status_fops = {
     .owner   = THIS_MODULE,
     .open    = nv_procfs_open_numa_status,
@@ -1232,6 +1296,7 @@ static const struct file_operations nv_procfs_offline_pages_fops = {
     .llseek  = seq_lseek,
     .release = nv_procfs_close_offline_pages,
 };
+#endif
 
 static int
 nv_procfs_read_text_file(
diff --git a/kernel/nvidia/nvidia.Kbuild b/kernel/nvidia/nvidia.Kbuild
index 4db52a5..a565f86 100644
--- a/kernel/nvidia/nvidia.Kbuild
+++ b/kernel/nvidia/nvidia.Kbuild
@@ -104,11 +104,14 @@ NV_CONFTEST_FUNCTION_COMPILE_TESTS += set_memory_array_uc
 NV_CONFTEST_FUNCTION_COMPILE_TESTS += acquire_console_sem
 NV_CONFTEST_FUNCTION_COMPILE_TESTS += console_lock
 NV_CONFTEST_FUNCTION_COMPILE_TESTS += ioremap_cache
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += ioremap_nocache
 NV_CONFTEST_FUNCTION_COMPILE_TESTS += ioremap_wc
 NV_CONFTEST_FUNCTION_COMPILE_TESTS += acpi_walk_namespace
 NV_CONFTEST_FUNCTION_COMPILE_TESTS += sg_alloc_table
 NV_CONFTEST_FUNCTION_COMPILE_TESTS += pci_get_domain_bus_and_slot
 NV_CONFTEST_FUNCTION_COMPILE_TESTS += get_num_physpages
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += ktime_get_raw_ts64
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += ktime_get_real_ts64
 NV_CONFTEST_FUNCTION_COMPILE_TESTS += efi_enabled
 NV_CONFTEST_FUNCTION_COMPILE_TESTS += pde_data
 NV_CONFTEST_FUNCTION_COMPILE_TESTS += proc_remove
diff --git a/kernel/nvidia/nvlink_linux.c b/kernel/nvidia/nvlink_linux.c
index a5eb280..c429bd2 100644
--- a/kernel/nvidia/nvlink_linux.c
+++ b/kernel/nvidia/nvlink_linux.c
@@ -508,8 +508,8 @@ void * NVLINK_API_CALL nvlink_memcpy(void *dest, void *src, NvLength size)
 
 static NvBool nv_timer_less_than
 (
-    const struct timeval *a,
-    const struct timeval *b
+    const struct nv_timeval *a,
+    const struct nv_timeval *b
 )
 {
     return (a->tv_sec == b->tv_sec) ? (a->tv_usec < b->tv_usec) 
@@ -518,9 +518,9 @@ static NvBool nv_timer_less_than
 
 static void nv_timeradd
 (
-    const struct timeval    *a,
-    const struct timeval    *b,
-    struct timeval          *result
+    const struct nv_timeval    *a,
+    const struct nv_timeval    *b,
+    struct nv_timeval          *result
 )
 {
     result->tv_sec = a->tv_sec + b->tv_sec;
@@ -534,9 +534,9 @@ static void nv_timeradd
 
 static void nv_timersub
 (
-    const struct timeval    *a,
-    const struct timeval    *b,
-    struct timeval          *result
+    const struct nv_timeval    *a,
+    const struct nv_timeval    *b,
+    struct nv_timeval          *result
 )
 {
     result->tv_sec = a->tv_sec - b->tv_sec;
@@ -556,7 +556,7 @@ void NVLINK_API_CALL nvlink_sleep(unsigned int ms)
     unsigned long us;
     unsigned long jiffies;
     unsigned long mdelay_safe_msec;
-    struct timeval tm_end, tm_aux;
+    struct nv_timeval tm_end, tm_aux;
 
     nv_gettimeofday(&tm_aux);
 
diff --git a/kernel/nvidia/os-interface.c b/kernel/nvidia/os-interface.c
index 9e1771a..7cfb2f7 100644
--- a/kernel/nvidia/os-interface.c
+++ b/kernel/nvidia/os-interface.c
@@ -458,7 +458,7 @@ NV_STATUS NV_API_CALL os_get_current_time(
     NvU32 *useconds
 )
 {
-    struct timeval tm;
+    struct nv_timeval tm;
 
     nv_gettimeofday(&tm);
 
@@ -472,9 +472,15 @@ NV_STATUS NV_API_CALL os_get_current_time(
 
 void NV_API_CALL os_get_current_tick(NvU64 *nseconds)
 {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 5, 0)
+    struct timespec64 ts;
+
+    jiffies_to_timespec64(jiffies, &ts);
+#else
     struct timespec ts;
 
     jiffies_to_timespec(jiffies, &ts);
+#endif
 
     *nseconds = ((NvU64)ts.tv_sec * NSEC_PER_SEC + (NvU64)ts.tv_nsec);
 }
@@ -544,7 +550,7 @@ NV_STATUS NV_API_CALL os_delay_us(NvU32 MicroSeconds)
     unsigned long usec;
 
 #ifdef NV_CHECK_DELAY_ACCURACY
-    struct timeval tm1, tm2;
+    struct nv_timeval tm1, tm2;
 
     nv_gettimeofday(&tm1);
 #endif
@@ -584,9 +590,9 @@ NV_STATUS NV_API_CALL os_delay(NvU32 MilliSeconds)
     unsigned long MicroSeconds;
     unsigned long jiffies;
     unsigned long mdelay_safe_msec;
-    struct timeval tm_end, tm_aux;
+    struct nv_timeval tm_end, tm_aux;
 #ifdef NV_CHECK_DELAY_ACCURACY
-    struct timeval tm_start;
+    struct nv_timeval tm_start;
 #endif
 
     nv_gettimeofday(&tm_aux);
@@ -1904,7 +1910,7 @@ static NV_STATUS NV_API_CALL _os_ipmi_receive_resp
 {
     struct ipmi_recv_msg    *rx_msg;
     int                     err_no;
-    struct timeval          tv;
+    struct nv_timeval          tv;
     NvU64                   start_time;
 
     nv_gettimeofday(&tv);
-- 
2.27.0

